using <stdio.h>::{printf};
using <assert.h>::{assert};

using string;
using address;
using err;
using udp;
using io;
using io::unix;
using net;

export fn main() -> int {
    new+1000 e = err::make();

    new recv_addr = address::from_cstr("0.0.0.0:8083");
    new send_addr = address::from_cstr("0.0.0.0:0");

    new+10 async = unix::make();


    new receiver = net::make_udp(net::os(), &e, &recv_addr, &async);
    e.abort();

    new sender   = net::make_udp(net::os(), &e, &send_addr, &async);
    e.abort();


    new+100 msg = string::make();
    msg.append_cstr("helloouuu");

    sender.sendto(&e, &msg, &recv_addr);
    e.abort();

    io::select(&async, &e, &receiver, io::Ready::Read);
    e.abort();

    for (;;) {
        io::wait(&async, &e);
        e.abort();

        string::String+100 mut sbuf = {0};
        sbuf.clear();

        new ra = address::none();
        if receiver.recvfrom(&e, &sbuf, &ra) == io::Result::Ready {
            printf("%zu >%.*s<\n", sbuf.len, (int)sbuf.len, sbuf.mem);
            break;
        }
        e.abort();

    }

    receiver.close();
    sender.close();

    return 0;
}
