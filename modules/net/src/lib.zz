using address;
using udp;

using err;
using io;

export fntype new_udp_fn(Engine *self, err::Err+et mut*e, address::Address *local_addr, io::Async mut* unsafe async)  -> udp::Socket;

export struct Engine {
    void *  handle1;
    int     handle2;
    int     handle3;
    void*   impl_new_udp;
}

static Engine os_engine = Engine {
    impl_new_udp:  (void*)udp::os_new,
};

export fn os() -> Engine*
    model safe(return)
{
    return &os_engine;
}


export fn make_udp(udp::Socket mut new*self, Engine *engine, err::Err+et mut*e, address::Address *local_addr, io::Async mut* unsafe async)
    where err::checked(*e)
{
    new_udp_fn impl_new_udp = (new_udp_fn)engine->impl_new_udp;
    if impl_new_udp == 0 {
        err::fail(e, 1, "no new_udp impl");
        return;
    }
    static_attest(safe(impl_new_udp));
    *self = impl_new_udp(engine, e, local_addr, async);
}
