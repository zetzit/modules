using address;
using string;
using err;
using io;


inline using (needs
    Socket,
    err::Err,
    err::fail_with_errno,
    err::fail,
    io::Context,
    address::Type,
    address::Address,
    io::Result,
    io::Ready,
    io::select,
) "os_udp.h"::{
    os_net_udp_bind,
    os_net_udp_close,
    os_net_udp_make_async,
    os_net_udp_recvfrom,
    os_net_udp_sendto,
};

export fntype sendto_fn(
        Socket mut*sock,
        err::Err *e,
        usize et,
        u8* mem,
        usize mut*memlen,
        address::Address *addr,
) -> io::Result;

export fntype recvfrom_fn   (
        Socket mut*sock,
        err::Err mut *e,
        usize et,
        u8 mut * mem,
        usize mut*memlen,
        address::Address *addr,
) -> io::Result;

export struct Socket {
    io::Context     ctx;
    void *          impl_sendto;
    void *          impl_recvfrom;
    io::close_fn    impl_close;
}

export fn close(Socket mut*self) {
    if self->impl_close == 0 {
        return;
    }
    static_attest(safe(self->impl_close));
    self->impl_close(&self->ctx);
}

pub fn os_new(void * _engine, err::Err+et mut*e, address::Address *addr,  io::Async mut* unsafe async) -> Socket
    where err::checked(*e)
{
    Socket mut sock = {0};
    os_net_udp_bind(e, et, addr, &sock);
    if err::check(e) {
        return sock;
    }

    if async == 0 {
        return sock;
    }
    static_attest(safe(async));
    os_net_udp_make_async(e, et, &sock);
    (sock.ctx).async = async;

    return sock;
}

export fn recvfrom(Socket mut *self, err::Err+et mut*e, string::String+st mut *buf, address::Address mut*from) -> io::Result
    where err::checked(*e)
{
    recvfrom_fn recv = (recvfrom_fn)self->impl_recvfrom;
    if recv == 0 {
        err::fail(e, 2, "no recv impl");
        return io::Result::Error;
    }
    static_attest(safe(recv));

    static_attest(len(buf->mem) > buf->len);
    usize mut memlen = st - buf->len;
    io::Result rr = (io::Result)recv(self, e, et, as<u8 mut*>(buf->mem + buf->len), &memlen, from);
    if err::check(e) {
        return rr;
    }
    buf->len += memlen;
    return rr;
}

export fn sendto(Socket mut *self, err::Err+et mut*e, string::String+st *buf, address::Address * to) -> io::Result
    where err::checked(*e)
{
    sendto_fn send = (sendto_fn)self->impl_sendto;
    if send == 0 {
        err::fail(e, 2, "no send impl");
        return io::Result::Error;
    }
    static_attest(safe(send));

    usize mut memlen = buf->len;
    io::Result rr = (io::Result)send(self, e, et, as<u8*>(buf->mem), &memlen, to);
    if err::check(e) {
        return rr;
    }
    return rr;
}
