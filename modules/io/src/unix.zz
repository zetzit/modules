using io;
using err;
using time;

using <unistd.h> as unistd;
using <string.h>::{memset};
using <errno.h>::{errno, EAGAIN};
using <poll.h>::{
    poll,
    (struct pollfd) as pollfd_t,
    POLLIN,
};
using <stdio.h>::{printf, STDIN_FILENO};
using <limits.h>::{INT_MAX};


export struct Async+ {
    io::Async   base;
    int         timeout;
    usize       count;
    usize       tail;
    pollfd_t    fds[];
}

export fn make(Async+tail mut new *self) {
    memset(self, 0, (usize)sizeof(Async));

    self->base.impl_make_timeout    = impl_make_timeout;
    self->base.impl_make_channel    = impl_make_channel;
    self->base.impl_select          = impl_unix_select;
    self->base.impl_wake            = impl_wake;
    self->base.impl_wait            = impl_wait;
    self->base.upper                = self;

    self->tail      = tail;

    self->reset();
}

fn reset(Async mut *self)
{
    self->count     = 0;
    self->timeout   = -1;
    memset(self->fds, 0, (usize)sizeof(pollfd_t) * self->tail);
}

pub fn select_fd(Async mut* self, int fd, int events) -> bool {

    for (usize mut i = 0; i < self->count;  i++) {
        static_attest(i < len(self->fds));
        unsafe {
            if ((self->fds)[i]).fd == fd && ((self->fds)[i]).events == events {
                return true;
            }
        }
    }

    if self->count + 1 >= self->tail {
        return false;
    }
    unsafe{
        ((self->fds)[self->count]).fd       = fd;
        ((self->fds)[self->count]).events   = events;
    }
    self->count += 1;
    return true;
}

fn impl_unix_select(io::Async mut* async, err::Err+et mut*e, io::Context mut*ctx, io::Ready w)
    where err::checked(*e)
{
    let self = (Async mut *)async->upper;
    static_attest(safe(self));

    if ctx->async == 0 {
        err::fail(e,1, "not an async io");
        return;
    }

    if ctx->fd != 0 {
        if !select_fd(self, ctx->fd, (int)POLLIN) {
            err::fail(e,1, "too many fds");
            return;
        }
    }

    if ctx->time != 0 {
        time::Time now  = time::tick();
        u64 mut now_m = now.to_millis();
        u64 remains = ctx->time - now_m;
        if self->timeout < 0 || (u64)self->timeout > remains {
            self->timeout = (int)remains;
        }
    }
}


fn impl_wait(io::Async mut* async, err::Err+et mut*e)
    where err::checked(*e)
{
    let self = (Async mut *)async->upper;
    static_attest(safe(self));

    //printf("io::unix::wait %d\n", self->timeout);
    int rr = (int)poll(self->fds, self->count, self->timeout);
    self->reset();
    if rr < 0 {
        err::fail_with_errno(e, "poll");
        return;
    }
}

export fn unix(int fd) -> io::Io
    model(safe(return.read_impl))
{
    io::Context ctx = io::Context{
        fd:         fd,
        isvalid:    true,
    };

    return io::Io {
        read_impl:  impl_unix_read,
        write_impl: impl_unix_write,
        close_impl: impl_unix_close,
        ctx:        ctx,
    };
}

export fn stdin() -> io::Io
    model(safe(return.read_impl))
{
    return unix(as<int>(STDIN_FILENO));
}

using <fcntl.h>::{fcntl, F_GETFL, O_NONBLOCK, F_SETFL};

export fn make_read_async(io::Io mut *i, io::Async mut* unsafe async) -> bool {

    (i->ctx).async = async;

    int mut flags = (int)fcntl((i->ctx).fd, F_GETFL, 0);
    if (flags == -1) {
        return false;
    }
    flags = flags | (int)O_NONBLOCK;

    return ((int)fcntl((i->ctx).fd, F_SETFL, flags) == 0);
}



fn impl_unix_read(io::Context mut*ctx, err::Err+et mut*e, u8 mut* to, usize mut *l) -> io::Result
    where err::checked(*e)
{
    if ctx->async != 0 {
        static_attest(safe(ctx->async));
        if !select_fd((Async mut*)ctx->async, ctx->fd, (int)POLLIN) {
            err::fail(e,1, "too many fds");
            return io::Result::Error;
        }
    }

    if *l == 0 {
        err::fail(e, 2, "buffer is 0 long");
        return io::Result::Error;
    }

    isize rr = (isize)unistd::read(ctx->fd, to, *l);
    if rr < 0 {
        if (int)errno == (int)EAGAIN {
            return io::Result::Later;
        }
        err::fail_with_errno(e, "read");
        return io::Result::Error;
    } else if rr == 0 {
        return io::Result::Eof;
    }
    *l= (usize)rr;
    return io::Result::Ready;
}


using <unistd.h>::{usleep};
fn impl_unix_write(io::Context mut*ctx, err::Err+et mut*e, u8 * to, usize mut *l) -> io::Result
    where err::checked(*e)
{
    for (usize mut attempt = 0;attempt<100;attempt++) {
        isize rr = (isize)unistd::write(ctx->fd, to, *l);
        if rr < 0 {
            if (int)errno == (int)EAGAIN {
                usleep(1000);
                continue;
            }
            err::fail_with_errno(e, "read");
            return io::Result::Error;
        }
        *l= (usize)rr;
        return io::Result::Ready;
    }
    static_attest(err::checked(*e));
    err::fail_with_errno(e, "read");
    return io::Result::Error;
}

fn impl_unix_close(io::Context mut* ctx)
{
    if !ctx->isvalid  {
        return;
    }
    unistd::close(ctx->fd);
    ctx->isvalid = false;
}


fn impl_wake(io::Async mut *async)
{
    let self= (Async mut *)async->upper;
    static_attest(safe(self));

    self->timeout = 0;
}

fn impl_make_timeout(io::Async mut *async, err::Err+et mut*e, time::Time t2) -> io::Io
    where err::checked(*e)
{
    if !t2.finite {
        return io::Io {
            read_impl:  impl_never,
        };
    }

    time::Time now = time::tick();
    u64 mut expires = now.to_millis();
    expires += t2.to_millis();

    io::Context ctx = io::Context{
        time:       expires,
        async:      (io::Async mut*)async,
        isvalid:    true,
    };

    return io::Io {
        read_impl:  impl_timeout_read,
        close_impl: impl_timer_close,
        ctx:        ctx,
    };
}

fn impl_never(io::Context mut*ctx, err::Err+et mut*e, u8 mut* to, usize mut *l) -> io::Result
{
    return io::Result::Later;
}

fn impl_timeout_read(io::Context mut*ctx, err::Err+et mut*e, u8 mut* to, usize mut *l) -> io::Result
    where err::checked(*e)
{
    *l = 0;

    if ctx->time == 0 {
        return io::Result::Eof;
    }

    time::Time now  = time::tick();
    u64 mut now_m = now.to_millis();
    if now_m > ctx->time {
        return io::Result::Ready;
    } else {
        Async mut* self = (Async mut*)ctx->async;
        static_attest(safe(self));
        u64 remains = ctx->time - now_m;
        if self->timeout < 0 || (u64)self->timeout > remains {
            self->timeout = (int)remains;
        }

    }
    return io::Result::Later;
}

fn impl_timer_close(io::Context mut*ctx) {
    ctx->time     = 0;
    ctx->isvalid  = false;
}



/* linux only

using <sys/timerfd.h> as timerfd;
using <sys/timerfd.h>::{(struct itimerspec) as itimerspec_t};
using <time.h>::{CLOCK_MONOTONIC};

fn impl_make_timeout(Async mut *async, err::Err+et mut*e, time::Duration t2, io::timeout_cb cb, void * unsafe user) -> io::Io
    where err::checked(*e)
{
    int fd  = (int)timerfd::timerfd_create(CLOCK_MONOTONIC, 0);
    if fd < 0 {
        err::fail_with_errno(e, "timerfd_create");
        return io::Io {
            read_impl: 0,
        };
    }

    itimerspec_t mut new_value;
    @{{
        new_value.it_value.tv_sec  = t2.secs;
        new_value.it_value.tv_nsec = t2.secs / 1000;
    }}@

    if ((int)timerfd::timerfd_settime(fd, 0, &new_value, 0) == -1) {
        err::fail_with_errno(e, "timerfd_settime");
        return io::Io {
            read_impl: 0,
        };
    }

    io::Io mut i = unix(fd);
    make_async(&i, (io::Async mut*)async);

    return i;
}
*/


fn impl_make_channel(io::Async mut *async, err::Err+et mut*e, io::Io mut*read, io::Io mut*write)
    where err::checked(*e)
{
    int mut fd[2];
    if unistd::pipe(fd) != 0 {
        e->fail_with_errno("pipe");
        return;
    }

    *read  = unix(fd[0]);
    *write = unix(fd[1]);
}
