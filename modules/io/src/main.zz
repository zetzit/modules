using io;
using io::unix;
using time;
using string;
using err;

using <stdio.h>::{perror, printf};
using <assert.h>::{assert};


export fn main() -> int {
    err::Err+1000 mut e;
    e.make();

    unix::Async+10 mut async;
    async.make();

    io::Io mut i = unix::stdin();
    unix::make_read_async(&i, (io::Async mut*)&async);

    printf("timeout will happen after 3 seconds, then every 1 second.\ninterval must remain uneffected from stdin input\n\n");
    io::Io mut t = io::timeout((io::Async mut*)&async, &e, time::from_seconds(3));
    e.abort();

    assert(t.valid());

    for (;;) {
        string::String+20 mut buf2;
        buf2.clear();

        switch t.read(&e, &buf2) {
            io::Result::Ready => {
                e.abort();

                printf("timeout\n");

                t.close();
                t = io::timeout((io::Async mut*)&async, &e, time::from_seconds(1));
                e.abort();

                io::select(&async, &e, &t, io::Ready::Read);
                e.abort();
            }
            default => {}
        }
        e.abort();

        string::String+2 mut buf;
        buf.clear();

        switch i.read(&e, &buf) {
            io::Result::Ready => {
                printf(">%s<\n", buf.mem);
            }
            io::Result::Later => {}
            io::Result::Error | io::Result::Eof => {
                e.abort();
                return 0;
            }
        }
        e.abort();

        io::wait(&async, &e);
        e.abort();
    }
    return 0;
}

