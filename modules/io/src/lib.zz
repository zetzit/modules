using time;
using string;
using err;
using slice;
using <stdio.h>::{printf};

export fntype make_timeout_fn   (Async mut* async, err::Err+et mut*e, time::Time t2) -> Io;
export fntype make_channel_fn   (Async mut* async, err::Err+et mut*e, Io mut *read, Io mut *write);
export fntype select_fn         (Async mut* async, err::Err+et mut* e, Context mut*ctx, Ready w);
export fntype wake_fn           (Async mut* async);
export fntype wait_fn           (Async mut* async, err::Err+et mut* e);

export struct Async {
    void * upper;

    make_timeout_fn     impl_make_timeout;
    make_channel_fn     impl_make_channel;
    select_fn           impl_select;
    wake_fn             impl_wake;
    wait_fn             impl_wait;
}


export enum Ready {
    Read,
    Write,
}

export enum Result {
    Ready,
    Later,
    Error,
    Eof,
}

export fntype read_fn  (Context mut* ctx, err::Err+et mut* e, u8 mut* to, usize mut* len) -> Result;
export fntype write_fn (Context mut* ctx, err::Err+et mut* e, u8* to, usize mut* len) -> Result;
export fntype close_fn (Context mut* ctx);


export struct Context {
    int         fd;
    void mut*   handle;
    u64         time;
    bool        isvalid;

    Async mut* unsafe async;
}

export struct Io {
    Context     ctx;
    read_fn     read_impl;
    write_fn    write_impl;
    close_fn    close_impl;
}

export fn valid(Context *self) -> bool {
    return self->isvalid;
}

export fn read(Io mut* self, err::Err+et mut* e, string::String+st mut* str) -> Result
    where st > 1
    where err::checked(*e)
{
    static_attest(str->len < len(str->mem));

    if self->read_impl == 0 {
        err::fail(e, 1, "noimpl");
        return Result::Error;
    }
    static_attest(safe(self->read_impl));

    usize mut l = st - str->len - 1;
    Result rr = self->read_impl(&self->ctx, e, as<u8 mut*>(str->mem + str->len), &l);
    if err::check(e) {
        return Result::Error;
    }
    if rr != Result::Ready {
        return rr;
    }
    str->len += l;
    static_attest(len(str->mem) > str->len);
    (str->mem)[str->len] = 0;
    return rr;
}

export fn read_slice(Io mut* self, err::Err+et mut* e, slice::MutSlice mut* slice) -> Result
    where err::checked(*e)
{
    if self->read_impl == 0 {
        err::fail(e, 1, "noimpl");
        return Result::Error;
    }
    static_attest(safe(self->read_impl));


    u8 mut * mem = slice->mem();
    if slice->at >= slice->slice.size {
        err::fail(e, 1, "oom");
        return Result::Error;
    }
    usize mut ll = slice->slice.size - slice->at;

    Result rr = self->read_impl(&self->ctx, e, mem + slice->at, &ll);
    if err::check(e) {
        return Result::Error;
    }
    if rr != Result::Ready {
        return rr;
    }

    slice->at += ll;
    static_attest(slice->at <= slice->slice.size);
    return rr;
}

export fn read_bytes(Io mut* self, err::Err+et mut* e, u8 mut* mem, usize mut *memlen) -> Result
    where err::checked(*e)
{
    if self->read_impl == 0 {
        err::fail(e, 1, "noimpl");
        return Result::Error;
    }
    static_attest(safe(self->read_impl));

    Result rr = self->read_impl(&self->ctx, e, mem, memlen);
    if err::check(e) {
        return Result::Error;
    }
    if rr != Result::Ready {
        return rr;
    }
    return rr;
}

export fn readline(Io mut* self, err::Err+et mut* e, string::String+st mut* str) -> Result
    where st > 1
    where err::checked(*e)
    where st > 2
{
    if self->read_impl == 0 {
        err::fail(e, 1, "noimpl");
        return Result::Error;
    }
    static_attest(safe(self->read_impl));

    u8 mut buf[2] = {0};
    usize mut l = 1;
    Result rr = self->read_impl(&self->ctx, e, buf, &l);
    if err::check(e) {
        return Result::Error;
    }
    if rr != Result::Ready {
        return rr;
    }

    char ch = as<char>(buf[0]);

    if ch == '\n' || ch == '\r' {
        return Result::Ready;
    }

    if !str->push(ch) {
        err::fail(e, 1, "oom");
        return Result::Error;
    }

    return Result::Later;
}

export fn write(Io mut* self, err::Err+et mut* e, string::String+st mut* str) -> Result
    where st > 1
    where err::checked(*e)
{
    static_attest(str->len < len(str->mem));
    usize mut blen = str->len;
    return write_bytes(self, e, (u8*)(str->mem), &blen);
}

export fn write_bytes(Io mut* self, err::Err+et mut* e, u8 *b, usize mut *blen) -> Result
    where err::checked(*e)
{
    if self->write_impl == 0 {
        err::fail(e, 1, "noimpl");
        return Result::Error;
    }
    static_attest(safe(self->write_impl));

    Result rr = self->write_impl(&self->ctx, e, b, blen);
    err::check(e);
    if rr != Result::Ready {
        return rr;
    }
    return rr;
}

export fn write_cstr(Io mut* self, err::Err+et mut* e, char *b) -> Result
    where nullterm(b)
    where err::checked(*e)
{
    if self->write_impl == 0 {
        err::fail(e, 1, "noimpl");
        return Result::Error;
    }
    static_attest(safe(self->write_impl));

    usize mut blen = string::strlen(b);

    Result rr = self->write_impl(&self->ctx, e, (u8*)b, &blen);
    err::check(e);
    if rr != Result::Ready {
        return rr;
    }
    return rr;
}

export fn close(Io mut* self)
{
    if self->close_impl == 0 {
        return;
    }
    static_attest(safe(self->close_impl));
    self->close_impl(&self->ctx);
}

export fn select(Async mut *self, err::Err+et mut* e, Context mut*ctx, Ready w)
    where err::checked(*e)
{
    if self->impl_select == 0 {
        return;
    }
    static_attest(safe(self->impl_select));
    self->impl_select(self, e, ctx, w);
}


export fn timeout(Async mut* self, err::Err+et mut*e, time::Time t2) -> Io
    where err::checked(*e)
{
    if self->impl_make_timeout != 0 {
        static_attest(safe(self->impl_make_timeout));
        return self->impl_make_timeout(self, e, t2);
    }
    return Io{
        read_impl: 0,
    };
}

export fn channel(Async mut* self, err::Err+et mut*e, Io mut*read, Io mut*write)
    where err::checked(*e)
{
    if self->impl_make_channel != 0 {
        static_attest(safe(self->impl_make_channel));
        self->impl_make_channel(self, e, read, write);
    }
}


export fn wake(Async mut* self) {
    if self->impl_wake != 0 {
        static_attest(safe(self->impl_wake));
        self->impl_wake(self);
    }
}

export fn wait(Async mut* self, err::Err+et mut*e)
     where err::checked(*e)
{
    if self->impl_wait != 0 {
        static_attest(safe(self->impl_wait));
        self->impl_wait(self,e );
    }
}

export fntype poll_fn    (void mut *user, err::Err+et mut* e, Async mut* async) -> Result;
export fn await(Async mut* self, err::Err+et mut*e, void *poll, void mut* user, time::Time timeout_)
    where err::checked(*e)
    where safe(user)
    where safe(poll)
{
    let mut tt = timeout(self, e,timeout_);
    string::String+8 mut b;
    b.clear();
    if err::check(e) {return;}

    poll_fn fp = (poll_fn)poll;
    for (;;) {
        if tt.valid() {
            if tt.read(e, &b) == Result::Ready {
                if err::check(e) {
                    return;
                }
                err::fail(e, 4, "timeout");
            }
        }
        if fp(user, e, self) == Result::Ready {
            return;
        }
        if err::check(e) {
            return;
        }
        self->wait(e);
        if err::check(e) {
            return;
        }
    }
}

